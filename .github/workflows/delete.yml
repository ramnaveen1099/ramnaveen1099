name: Branch-deletion
run-name: ${{ github.actor }} is executing Pipeline
on:
  workflow_dispatch:
    inputs:
      Branchname:
        description: 'Select Branch'
        required: true
        default: 'master'
        type: choice
        options:
        - master
jobs:
  Multi-Branch-Creation:
    runs-on: windows-2019
    steps:
      - name: Cloning Input File
        uses: actions/checkout@v3
      - run: |
          echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
          echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
          echo "🖥️ The Workspace ${{ github.workspace }} is now ready."
          tree /f ${{ github.workspace }}
      - name: Gettin Credentials
        shell: pwsh
        env:
          Token: ${{ secrets.Branch_Creation_Token }}
        run: |
          "Token=$env:Branch_Creation_Token" >> $env:GITHUB_ENV
       
      - name: Performing Branch deletion   
        shell: pwsh
        run: |
          
          function delete_branch
          {
           param(
           [string]$Repo_Name,
           [string]$Branch_Name
           )
           Write-Host "Deleting branch name ::$Branch_Name"
           $token = ConvertTo-SecureString $env:Branch_Creation_Token -AsPlainText -Force
           $Branch_tag=$Branch_Name -split"/"
           $tag=$Branch_tag[0]
           Write-Host $tag
           Write-Host $Branch_Name

           $Parameters = @{
              Method = "Delete"
              Uri =  "https://api.github.com/repos/ramnaveen1099/"+$Repo_Name+"/git/refs/heads/"+$Branch_Name
              Token= $token
          }
          $response = Invoke-RestMethod @Parameters -Authentication Bearer -SkipHttpErrorCheck -StatusCodeVariable "scv"
          Write-verbose "Response :: $($response | ConvertTo-Json )" -Verbose
          Write-verbose "Deleting branch:- $Branch_Name Response Code :: $scv" -Verbose
          
          }
          $filePath= 'Branch_Deletions/inputs.csv'
          Write-Host "Input Parameter File Path: $filePath"
          $testPath=Test-Path $filePath
          if($testPath -eq $true){
            Write-Host "Input Parameter File Exist"
            $allCsvData=Import-CSV -Path $filePath
            foreach ($csvData in $allCsvData)  
            {
              Write-Verbose "Branch_Details ::- `n Repo_Name :: $($csvData.Repo_Name), Branch_Name :: $($csvData.Branch_Name)" -Verbose
              $Repo_Name=$($csvData.Repo_Name).trim()
              $Branch_Name=$($csvData.Branch_Name).trim()
              $branch= delete_branch -Repo_Name $Repo_Name -Branch_Name $Branch_Name 
            }
            }
